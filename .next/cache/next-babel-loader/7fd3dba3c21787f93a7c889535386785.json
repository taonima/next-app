{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nvar request = function request(url, config) {\n  return fetch(\"\".concat(process.env.NEXT_PUBLIC_BASE_URL).concat(url), config).then(function (res) {\n    if (!res.ok) {\n      throw Error('');\n    }\n\n    return res.json();\n  }).then(function (resJson) {\n    if (resJson.code === 0) {\n      return Promise.resolve(resJson.data || {});\n    } else {\n      _message.error(resJson.message);\n\n      return {};\n    }\n  })[\"catch\"](function (error) {\n    // 公共错误处理\n    console.log(error);\n  });\n};\n\nexport var get = function get(url, params) {\n  if (params) {\n    url += Object.keys(params).reduce(function (accumulator, currentValue, index) {\n      return \"\".concat(index !== 0 ? '&' : '').concat(accumulator).concat(currentValue, \"=\").concat(params[currentValue]);\n    }, '?');\n  }\n\n  return request(url, {\n    method: 'GET'\n  });\n};\nexport var post = function post(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return request(url, {\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    },\n    method: 'POST'\n  });\n};\nexport default {\n  get: get,\n  post: post\n};","map":{"version":3,"sources":["D:/WebstormProjects/next-app/utils/request.ts"],"names":["request","url","config","fetch","process","env","NEXT_PUBLIC_BASE_URL","then","res","ok","Error","json","resJson","code","Promise","resolve","data","error","message","console","log","get","params","Object","keys","reduce","accumulator","currentValue","index","method","post","body","JSON","stringify","headers"],"mappings":";;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAcC,MAAd,EAA8B;AAC1C,SAAOC,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,oBAAhB,SAAuCL,GAAvC,GAA8CC,MAA9C,CAAL,CAA2DK,IAA3D,CAAgE,UAACC,GAAD,EAAc;AACjF,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,YAAMC,KAAK,CAAC,EAAD,CAAX;AACH;;AACD,WAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,GALM,EAKJJ,IALI,CAKC,UAACK,OAAD,EAAkB;AACtB,QAAIA,OAAO,CAACC,IAAR,KAAiB,CAArB,EAAwB;AAEpB,aAAOC,OAAO,CAACC,OAAR,CAAgBH,OAAO,CAACI,IAAR,IAAgB,EAAhC,CAAP;AACH,KAHD,MAGO;AACH,eAAQC,KAAR,CAAcL,OAAO,CAACM,OAAtB;;AACA,aAAO,EAAP;AACH;AACJ,GAbM,WAaE,UAACD,KAAD,EAAgB;AACrB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,GAhBM,CAAP;AAiBH,CAlBD;;AAoBA,OAAO,IAAMI,GAAG,GAAG,SAANA,GAAM,CAACpB,GAAD,EAAMqB,MAAN,EAAkB;AACjC,MAAIA,MAAJ,EAAY;AACRrB,IAAAA,GAAG,IAAIsB,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CAA2B,UAACC,WAAD,EAAcC,YAAd,EAA4BC,KAA5B,EAAsC;AACpE,uBAAUA,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoB,EAA9B,SAAmCF,WAAnC,SAAiDC,YAAjD,cAAiEL,MAAM,CAACK,YAAD,CAAvE;AACH,KAFM,EAEJ,GAFI,CAAP;AAGH;;AACD,SAAO3B,OAAO,CAACC,GAAD,EAAK;AAAC4B,IAAAA,MAAM,EAAE;AAAT,GAAL,CAAd;AACH,CAPM;AASP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAC7B,GAAD,EAAsB;AAAA,MAAhBqB,MAAgB,uEAAP,EAAO;AACtC,SAAOtB,OAAO,CAACC,GAAD,EAAM;AAChB8B,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,MAAf,CADU;AAEhBY,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFO;AAKhBL,IAAAA,MAAM,EAAE;AALQ,GAAN,CAAd;AAOH,CARM;AAUP,eAAe;AACXR,EAAAA,GAAG,EAAHA,GADW;AAEXS,EAAAA,IAAI,EAAJA;AAFW,CAAf","sourcesContent":["import {message} from \"antd\";\r\n\r\nconst request = (url: string, config: any) => {\r\n    return fetch(`${process.env.NEXT_PUBLIC_BASE_URL}${url}`, config).then((res: any) => {\r\n        if (!res.ok) {\r\n            throw Error('');\r\n        }\r\n        return res.json();\r\n    }).then((resJson: any) => {\r\n        if (resJson.code === 0) {\r\n\r\n            return Promise.resolve(resJson.data || {});\r\n        } else {\r\n            message.error(resJson.message);\r\n            return {};\r\n        }\r\n    }).catch((error: any) => {\r\n        // 公共错误处理\r\n        console.log(error)\r\n    });\r\n};\r\n\r\nexport const get = (url, params?) => {\r\n    if (params) {\r\n        url += Object.keys(params).reduce((accumulator, currentValue, index) => {\r\n            return `${index !== 0 ? '&' : ''}${accumulator}${currentValue}=${params[currentValue]}`\r\n        }, '?')\r\n    }\r\n    return request(url,{method: 'GET'})\r\n}\r\n\r\nexport const post = (url, params = {}) => {\r\n    return request(url, {\r\n        body: JSON.stringify(params),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        method: 'POST'\r\n    });\r\n}\r\n\r\nexport default {\r\n    get,\r\n    post\r\n}"]},"metadata":{},"sourceType":"module"}