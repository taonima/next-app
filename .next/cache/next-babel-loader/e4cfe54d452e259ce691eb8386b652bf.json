{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nconst request = (url, config) => {\n  return new Promise((resolve, reject) => {\n    fetch(`${process.env.NEXT_PUBLIC_BASE_URL}${url}`, config).then(res => {\n      if (!res.ok) {\n        throw Error('');\n      }\n\n      return res.json();\n    }).then(resJson => {\n      console.log(resJson);\n\n      if (resJson.code === 0) {\n        return resolve(resJson.data || {});\n      } else {\n        _message.error(resJson.message);\n\n        return reject();\n      }\n    }).catch(error => {\n      // 公共错误处理\n      console.log(error);\n    });\n  });\n};\n\nexport const get = (url, params) => {\n  if (params) {\n    url += Object.keys(params).reduce((accumulator, currentValue, index) => {\n      return `${index !== 0 ? '&' : ''}${accumulator}${currentValue}=${params[currentValue]}`;\n    }, '?');\n  }\n\n  return request(url, {\n    method: 'GET'\n  });\n};\nexport const post = (url, params = {}) => {\n  return request(url, {\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    },\n    method: 'POST'\n  });\n};\nexport default {\n  get,\n  post\n};","map":{"version":3,"sources":["D:/WebstormProjects/next-app/utils/request.ts"],"names":["request","url","config","Promise","resolve","reject","fetch","process","env","NEXT_PUBLIC_BASE_URL","then","res","ok","Error","json","resJson","console","log","code","data","error","message","catch","get","params","Object","keys","reduce","accumulator","currentValue","index","method","post","body","JSON","stringify","headers"],"mappings":";;;AAEA,MAAMA,OAAO,GAAG,CAACC,GAAD,EAAcC,MAAd,KAA8B;AAC1C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,GAAER,GAAI,EAA3C,EAA8CC,MAA9C,CAAL,CAA2DQ,IAA3D,CAAiEC,GAAD,IAAc;AAC1E,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,cAAMC,KAAK,CAAC,EAAD,CAAX;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KALD,EAKGJ,IALH,CAKSK,OAAD,IAAkB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,UAAIA,OAAO,CAACG,IAAR,KAAiB,CAArB,EAAwB;AACpB,eAAOd,OAAO,CAACW,OAAO,CAACI,IAAR,IAAgB,EAAjB,CAAd;AACH,OAFD,MAEO;AACH,iBAAQC,KAAR,CAAcL,OAAO,CAACM,OAAtB;;AACA,eAAOhB,MAAM,EAAb;AACH;AACJ,KAbD,EAaGiB,KAbH,CAaUF,KAAD,IAAgB;AACrB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,KAhBD;AAiBH,GAlBM,CAAP;AAmBH,CApBD;;AAsBA,OAAO,MAAMG,GAAG,GAAG,CAACtB,GAAD,EAAMuB,MAAN,KAAkB;AACjC,MAAIA,MAAJ,EAAY;AACRvB,IAAAA,GAAG,IAAIwB,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CAA2B,CAACC,WAAD,EAAcC,YAAd,EAA4BC,KAA5B,KAAsC;AACpE,aAAQ,GAAEA,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoB,EAAG,GAAEF,WAAY,GAAEC,YAAa,IAAGL,MAAM,CAACK,YAAD,CAAe,EAAtF;AACH,KAFM,EAEJ,GAFI,CAAP;AAGH;;AACD,SAAO7B,OAAO,CAACC,GAAD,EAAK;AAAC8B,IAAAA,MAAM,EAAE;AAAT,GAAL,CAAd;AACH,CAPM;AASP,OAAO,MAAMC,IAAI,GAAG,CAAC/B,GAAD,EAAMuB,MAAM,GAAG,EAAf,KAAsB;AACtC,SAAOxB,OAAO,CAACC,GAAD,EAAM;AAChBgC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,MAAf,CADU;AAEhBY,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFO;AAKhBL,IAAAA,MAAM,EAAE;AALQ,GAAN,CAAd;AAOH,CARM;AAUP,eAAe;AACXR,EAAAA,GADW;AAEXS,EAAAA;AAFW,CAAf","sourcesContent":["import {message} from \"antd\";\r\n\r\nconst request = (url: string, config: any) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${process.env.NEXT_PUBLIC_BASE_URL}${url}`, config).then((res: any) => {\r\n            if (!res.ok) {\r\n                throw Error('');\r\n            }\r\n            return res.json();\r\n        }).then((resJson: any) => {\r\n            console.log(resJson)\r\n            if (resJson.code === 0) {\r\n                return resolve(resJson.data || {});\r\n            } else {\r\n                message.error(resJson.message);\r\n                return reject();\r\n            }\r\n        }).catch((error: any) => {\r\n            // 公共错误处理\r\n            console.log(error)\r\n        });\r\n    })\r\n};\r\n\r\nexport const get = (url, params?) => {\r\n    if (params) {\r\n        url += Object.keys(params).reduce((accumulator, currentValue, index) => {\r\n            return `${index !== 0 ? '&' : ''}${accumulator}${currentValue}=${params[currentValue]}`\r\n        }, '?')\r\n    }\r\n    return request(url,{method: 'GET'})\r\n}\r\n\r\nexport const post = (url, params = {}) => {\r\n    return request(url, {\r\n        body: JSON.stringify(params),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        method: 'POST'\r\n    });\r\n}\r\n\r\nexport default {\r\n    get,\r\n    post\r\n}"]},"metadata":{},"sourceType":"module"}